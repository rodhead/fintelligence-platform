version: '3.8'

services:
  # ============================================
  # Databases
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: finplatform-postgres
    environment:
      POSTGRES_USER: finplatform
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: finplatform_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finplatform"]
      interval: 10s
      timeout: 5s
      retries: 5

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: finplatform-timescale
    environment:
      POSTGRES_USER: finplatform
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: finplatform_timeseries
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./init-scripts/timescale:/docker-entrypoint-initdb.d
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finplatform"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    container_name: finplatform-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: finplatform
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: analytics_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./init-scripts/mongo:/docker-entrypoint-initdb.d
    networks:
      - finplatform-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: finplatform-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Message Queue
  # ============================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: finplatform-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: finplatform-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: finplatform-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8090:8080"
    networks:
      - finplatform-network

  # ============================================
  # Service Discovery
  # ============================================
  eureka:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: finplatform-eureka
    ports:
      - "8761:8761"
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================
  # API Gateway
  # ============================================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: finplatform-gateway
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:8761/eureka/
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================
  # Microservices
  # ============================================
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: finplatform-user-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/finplatform_users
      SPRING_DATASOURCE_USERNAME: finplatform
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-password}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:8761/eureka/
      JWT_SECRET: ${JWT_SECRET}
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  banking-service:
    build:
      context: ./banking-service
      dockerfile: Dockerfile
    container_name: finplatform-banking-service
    depends_on:
      timescaledb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://timescaledb:5432/finplatform_timeseries
      SPRING_DATASOURCE_USERNAME: finplatform
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-password}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:8761/eureka/
      PLAID_CLIENT_ID: ${PLAID_CLIENT_ID}
      PLAID_SECRET: ${PLAID_SECRET}
      PLAID_ENVIRONMENT: ${PLAID_ENVIRONMENT:-sandbox}
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: finplatform-analytics-service
    depends_on:
      mongodb:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      MONGODB_URL: mongodb://finplatform:${MONGO_PASSWORD:-password}@mongodb:27017/analytics_db?authSource=admin
      DATABASE_URL: postgresql+asyncpg://finplatform:${DB_PASSWORD:-password}@timescaledb:5432/finplatform_timeseries
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://:${REDIS_PASSWORD:-password}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SERVICE_NAME: analytics-service
    ports:
      - "8083:8000"
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: finplatform-ml-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      MONGODB_URL: mongodb://finplatform:${MONGO_PASSWORD:-password}@mongodb:27017/ml_db?authSource=admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://:${REDIS_PASSWORD:-password}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      TENSORFLOW_MODEL_PATH: /app/models
      SERVICE_NAME: ml-service
    ports:
      - "8084:8000"
    volumes:
      - ml_models:/app/models
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: finplatform-notification-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/finplatform_notifications
      SPRING_DATASOURCE_USERNAME: finplatform
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-password}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:8761/eureka/
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8085:8085"
    networks:
      - finplatform-network

  # ============================================
  # Frontend
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        API_URL: http://localhost:8080
    container_name: finplatform-frontend
    depends_on:
      - api-gateway
    ports:
      - "4200:80"
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================
  # Monitoring & Observability
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: finplatform-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - finplatform-network

  grafana:
    image: grafana/grafana:latest
    container_name: finplatform-grafana
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - finplatform-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: finplatform-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - finplatform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: finplatform-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - finplatform-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: finplatform-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - finplatform-network

# ============================================
# Networks
# ============================================
networks:
  finplatform-network:
    driver: bridge

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
  timescale_data:
  mongo_data:
  redis_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  ml_models:
